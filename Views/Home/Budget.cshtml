@using System.Text.Json
@model MyEconomy.Models.BudgetViewModel

@{
    var options = new JsonSerializerOptions { PropertyNamingPolicy = JsonNamingPolicy.CamelCase };
}

<h2 class="content-box">My budget</h2>

<form asp-action="AddBudgetEntry" method="post" class="content-box mb-3">
    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#budgetModal">
        Edit Budget
    </button>
</form>

<div class="content-box mb-4">
    <table class="table">
        <thead>
            <tr>
                <th>Description</th>
                <th>Income</th>
                <th>Expenditure</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var entry in Model.Entries)
            {
                <tr>
                    <td>@entry.Description</td>
                    <td>@(entry.Amount > 0 ? entry.Amount.ToString("0.00") + " SEK" : "")</td>
                    <td>@(entry.Amount < 0 ? "- " + Math.Abs(entry.Amount).ToString("0.00") + " SEK" : "")</td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <td colspan="2"><strong>Total Income</strong></td>
                <td>@Model.TotalIncome.ToString("0.00") SEK</td>
            </tr>
            <tr>
                <td colspan="2"><strong>Total Expense</strong></td>
                <td>-@Math.Abs(Model.TotalExpense).ToString("0.00") SEK</td>
            </tr>
            <tr style="border-top: 2px solid white;">
                <td colspan="2"><strong>Balance</strong></td>
                <td>@(Model.Balance.ToString("0.00")) SEK</td>
            </tr>
        </tfoot>
    </table>
</div>

<!-- Modal -->
<div class="modal fade" id="budgetModal" tabindex="-1" aria-labelledby="budgetModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <!-- Wrap actual modal content in content-box for readability -->
            <div class="content-box">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Budget Entries</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="modalEntryForm">
                        <div class="row mb-3">
                            <div class="col">
                                <select id="modalType" class="form-select" required>
                                    <option value="">Select Type</option>
                                    <option value="Income">Income</option>
                                    <option value="Expense">Expense</option>
                                </select>
                            </div>
                            <div class="col">
                                <input type="text" id="modalDescription" class="form-control" placeholder="Description" required />
                            </div>
                            <div class="col">
                                <input type="number" id="modalAmount" class="form-control" step="0.01" placeholder="Amount" required />
                            </div>
                            <div class="col">
                                <button type="button" class="btn btn-success" onclick="addEntry()">Add</button>
                            </div>
                        </div>
                    </form>

                    <table class="table" id="entryPreviewTable">
                        <thead>
                            <tr>
                                <th>Type</th>
                                <th>Description</th>
                                <th>Amount</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="existingEntriesTbody"></tbody>
                        <tbody id="newEntriesTbody"></tbody>
                    </table>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" onclick="resetEntries()">Undo</button>
                    <button type="button" class="btn btn-primary" onclick="submitEntries()">Confirm</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    const existingEntries = @Html.Raw(JsonSerializer.Serialize(Model.Entries, options));
    let tempEntries = [];
    let editingIndex = null;

    window.onload = () => {
        renderExistingEntries();

        // Add Enter key support on the amount input
        document.getElementById("modalAmount").addEventListener("keydown", function(event) {
            if (event.key === "Enter") {
                event.preventDefault();
                addEntry();
            }
        });
    }

    function renderExistingEntries() {
        const tbody = document.getElementById("existingEntriesTbody");
        tbody.innerHTML = "";

        existingEntries.forEach(entry => {
            const amount = Math.abs(Number(entry.amount)).toFixed(2);

            const row = document.createElement("tr");
            row.innerHTML = `
                <td>${entry.type}</td>
                <td>${entry.description}</td>
                <td>${amount} SEK</td>
                <td>
                    <button class="btn btn-sm btn-danger" onclick="deleteExistingEntry(${entry.id})">Delete</button>
                </td>
            `;
            tbody.appendChild(row);
        });
    }

    function deleteExistingEntry(id) {
        if (confirm("Are you sure you want to delete this entry?")) {
            fetch('/Home/DeleteBudgetEntry/' + id, {
                method: 'DELETE'
            }).then(res => {
                if (res.ok) {
                    const index = existingEntries.findIndex(e => e.id === id);
                    if (index > -1) {
                        existingEntries.splice(index, 1);
                        renderExistingEntries();
                    }
                } else {
                    alert("Failed to delete.");
                }
            });
        }
    }

    function updateTable() {
        const tbody = document.getElementById("newEntriesTbody");
        tbody.innerHTML = "";

        tempEntries.forEach((entry, index) => {
            const amount = Math.abs(Number(entry.amount)).toFixed(2);

            const row = document.createElement("tr");
            row.innerHTML = `
                <td>${entry.type}</td>
                <td>${entry.description}</td>
                <td>${amount} SEK</td>
                <td>
                    <button class="btn btn-sm btn-danger" onclick="removeEntry(${index})">Delete</button>
                </td>
            `;
            tbody.appendChild(row);
        });
    }

    function addEntry() {
        const type = document.getElementById("modalType").value;
        const desc = document.getElementById("modalDescription").value.trim();
        const amount = parseFloat(document.getElementById("modalAmount").value);

        if (!type || !desc || isNaN(amount)) {
            alert("Please fill in all fields with valid values.");
            return;
        }

        const entry = { type, description: desc, amount };

        if (editingIndex !== null) {
            tempEntries[editingIndex] = { ...tempEntries[editingIndex], ...entry };
            editingIndex = null;
        } else {
            tempEntries.push(entry);
        }

        updateTable();
        document.getElementById("modalEntryForm").reset();
        document.getElementById("modalType").focus();
    }

    function removeEntry(index) {
        tempEntries.splice(index, 1);
        updateTable();
    }

    function resetEntries() {
        tempEntries = [];
        updateTable();
    }

    function submitEntries() {
        fetch('/Home/SubmitEntries', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(tempEntries)
        })
        .then(response => {
            if (response.ok) {
                location.reload();
            } else {
                alert("Something went wrong.");
            }
        });
    }
</script>
